{"version":3,"sources":["utils/firabase.ts","views/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Home","useState","selectedOption","setSelectedOption","query","setQuery","className","htmlFor","onChange","event","value","target","enteredName","placeholder","onClick","select","alert","todoRef","database","ref","child","once","then","snapshot","numberofNode","numChildren","toString","set","createtodo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAaAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,0EACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAInBT,IAASU,YAEMV,QAAf,E,OCsDeW,EAlEQ,WACrB,MAA4CC,qBAA5C,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuCA,OACE,sBAAKC,UAAU,MAAf,UACE,uBACA,uBAAOC,QAAQ,QAAf,4BACA,yBAAQC,SAbS,SAACC,GACpB,IAAMC,EAAQD,EAAME,OAAOD,MAC3BP,EAAkBO,IAWhB,UACE,wBAAQA,MAAM,GAAd,yBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,sBAEF,uBACIA,MAAON,EACPI,SApBa,SAACC,GACpB,IAAMG,EAAcH,EAAME,OAAOD,MACjCL,EAASO,IAmBHC,YAAY,aAEhB,wBAAQC,QAAS,kBAvDF,SAACC,GAClB,GAAa,KAAVX,EACDY,MAAM,YAEH,GAAe,KAAXD,EACPC,MAAM,WAEJ,CACF,IAAMC,EAAU5B,EAAS6B,WAAWC,IAAI,QAAQC,MAAML,GACtDE,EAAQI,KAAK,SAASC,MAAK,SAASC,GAClC,IAAIC,EAAeD,EAASE,cAAcC,WAC1CT,EAAQG,MAAMI,GAAcG,IAAIvB,OA4CXwB,CAAW1B,IAAlC,qBCrDS2B,MARf,WACE,OACI,mCACE,cAAC,EAAD,OCSOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.103e2135.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC_2-zZEm-CGH4_Lbxggl53IEBoTT-Svps\",\r\n    authDomain: \"gachadatabase.firebaseapp.com\",\r\n    databaseURL: \"https://gachadatabase-default-rtdb.asia-southeast1.firebasedatabase.app\",\r\n    projectId: \"gachadatabase\",\r\n    storageBucket: \"gachadatabase.appspot.com\",\r\n    messagingSenderId: \"229705341008\",\r\n    appId: \"1:229705341008:web:6644ad1dff34204623d955\",\r\n    measurementId: \"G-H6WYPZMP7G\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport default firebase;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport firebase from \"../../utils/firabase\";\r\n\r\nconst Home: React.FC = () => {\r\n  const [selectedOption, setSelectedOption] = useState<String>();\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const createtodo = (select : any) => {\r\n    if(query === \"\"){\r\n      alert(\"kuy\")\r\n    }\r\n    else if (select === \"\"){\r\n      alert(\"hee\")\r\n    }\r\n    else{\r\n      const todoRef = firebase.database().ref('item').child(select)\r\n      todoRef.once(\"value\").then(function(snapshot){\r\n        var numberofNode = snapshot.numChildren().toString()\r\n        todoRef.child(numberofNode).set(query)\r\n      })\r\n    }\r\n  }\r\n  const readtodo = () => {\r\n\r\n    const todoRef = firebase.database().ref('5555')\r\n    todoRef.on('value',(snapshot)=>{\r\n      const todos = snapshot.val();\r\n      const todolist = [];\r\n      for (let id in todos) {\r\n        todolist.push(id, ...todos[id])\r\n      }\r\n      return todolist\r\n    })\r\n  }\r\n\r\n  const selectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = event.target.value;\r\n    setSelectedOption(value);\r\n  };\r\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const enteredName = event.target.value;\r\n    setQuery(enteredName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <br/>\r\n      <label htmlFor=\"tiers\">Choose a tier:</label>\r\n      <select onChange={selectChange}>\r\n        <option value=\"\">select tier</option>\r\n        <option value=\"tier1\">tier1</option>\r\n        <option value=\"tier2\">tier2</option>\r\n        <option value=\"tier3\">tier3</option>\r\n        <option value=\"tier4\">tier4</option>\r\n        <option value=\"tier5\">tier5</option>\r\n        <option value=\"tier6\">tier6</option>\r\n      </select>\r\n      <input\r\n          value={query}\r\n          onChange={inputHandler}\r\n          placeholder=\"URL Ipfs\"\r\n      />\r\n      <button onClick={() => createtodo(selectedOption)}>ADD</button>\r\n                      {/*Make an anonymous arrow function*/}\r\n      {/*<button onClick={readtodo}></button>*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import Home from \"./views/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n      <>\r\n        <Home />\r\n      </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}